name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: "Upload to TestPyPI instead of PyPI"
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync
          uv add --dev pytest pytest-cov

      - name: Run tests
        run: uv run pytest tests/ -v --cov=src/megashtein --cov-report=xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event.inputs.test_pypi == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install build dependencies
        run: |
          uv sync
          uv add --dev build twine

      - name: Build package
        run: uv run python -m build

      - name: Check package
        run: uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ github.sha }}
          path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_pypi == 'true'
    environment: test-pypi

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install twine
        run: uv tool install twine

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: uv tool run twine upload --repository testpypi dist/*

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install twine
        run: uv tool install twine

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: uv tool run twine upload dist/*

      - name: Create GitHub Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
